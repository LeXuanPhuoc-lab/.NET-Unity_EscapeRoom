// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace EscapeRoomAPI.Entities;

public partial class EscapeRoomUnityContext : DbContext
{
    public EscapeRoomUnityContext(DbContextOptions<EscapeRoomUnityContext> options)
        : base(options)
    {
    }

    public virtual DbSet<GameSession> GameSessions { get; set; }

    public virtual DbSet<Leaderboard> Leaderboards { get; set; }

    public virtual DbSet<Player> Players { get; set; }

    public virtual DbSet<PlayerGameAnswer> PlayerGameAnswers { get; set; }

    public virtual DbSet<PlayerGameSession> PlayerGameSessions { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionAnswer> QuestionAnswers { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer(GetConnectionString());
    }

    private string GetConnectionString()
    {
        IConfiguration config = new ConfigurationBuilder()
            .AddEnvironmentVariables()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", true, true)
            .AddJsonFile("appsettings.Docker.json", false, true)
            .AddEnvironmentVariables()
            .Build();

        var isDevelopment = config["ASPNETCORE_ENVIRONMENT"].Equals("Development");
        return config.GetConnectionString(isDevelopment ? "DefaultDB" : "DeployDB");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<GameSession>(entity =>
        {
            entity.HasKey(e => e.SessionId).HasName("PK__GameSess__C9F492901B46D757");

            entity.ToTable("GameSession");

            entity.Property(e => e.Hint).HasMaxLength(100);
            entity.Property(e => e.SessionCode)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.SessionName).HasMaxLength(100);
        });

        modelBuilder.Entity<Leaderboard>(entity =>
        {
            entity.HasKey(e => e.LeaderBoardId).HasName("PK__Leaderbo__91D442149723193C");

            entity.ToTable("Leaderboard");

            entity.Property(e => e.PlayerId)
                .IsRequired()
                .HasMaxLength(36);

            entity.HasOne(d => d.Player).WithMany(p => p.Leaderboards)
                .HasPrincipalKey(p => p.PlayerId)
                .HasForeignKey(d => d.PlayerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Leaderboard_PlayerId");

            entity.HasOne(d => d.Session).WithMany(p => p.Leaderboards)
                .HasForeignKey(d => d.SessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Leaderboard_SessionId");
        });

        modelBuilder.Entity<Player>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Player__3213E83FCAD2F2D2");

            entity.ToTable("Player");

            entity.HasIndex(e => e.PlayerId, "UQ__Player__4A4E74C95FB65E42").IsUnique();

            entity.HasIndex(e => e.Username, "UQ__Player__536C85E4025B578D").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PlayerId)
                .IsRequired()
                .HasMaxLength(36)
                .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(25);
        });

        modelBuilder.Entity<PlayerGameAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PlayerGa__3213E83F4FCA4DD2");

            entity.ToTable("PlayerGameAnswer");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.PlayerId)
                .IsRequired()
                .HasMaxLength(36);
            entity.Property(e => e.QuestionId)
                .IsRequired()
                .HasMaxLength(36);
            entity.Property(e => e.SelectAnswerId)
                .IsRequired()
                .HasMaxLength(36);

            entity.HasOne(d => d.Player).WithMany(p => p.PlayerGameAnswers)
                .HasPrincipalKey(p => p.PlayerId)
                .HasForeignKey(d => d.PlayerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlayerGameAnswer_PlayerId");

            entity.HasOne(d => d.Question).WithMany(p => p.PlayerGameAnswers)
                .HasPrincipalKey(p => p.QuestionId)
                .HasForeignKey(d => d.QuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlayerGameAnswer_QuestionId");

            entity.HasOne(d => d.SelectAnswer).WithMany(p => p.PlayerGameAnswers)
                .HasPrincipalKey(p => p.QuestionAnswerId)
                .HasForeignKey(d => d.SelectAnswerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlayerGameAnswer_SelectAnswerId");

            entity.HasOne(d => d.Session).WithMany(p => p.PlayerGameAnswers)
                .HasForeignKey(d => d.SessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlayerGameAnswer_SessionId");
        });

        modelBuilder.Entity<PlayerGameSession>(entity =>
        {
            entity.HasKey(e => new { e.SessionId, e.PlayerId }).HasName("PK__PlayerGa__5D5075DCB278F05E");

            entity.ToTable("PlayerGameSession");

            entity.Property(e => e.PlayerId).HasMaxLength(36);

            entity.HasOne(d => d.Player).WithMany(p => p.PlayerGameSessions)
                .HasPrincipalKey(p => p.PlayerId)
                .HasForeignKey(d => d.PlayerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlayerGameSession_PlayerId");

            entity.HasOne(d => d.Session).WithMany(p => p.PlayerGameSessions)
                .HasForeignKey(d => d.SessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlayerGameSession_SessionId");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3213E83F75227A3C");

            entity.ToTable("Question");

            entity.HasIndex(e => e.QuestionId, "UQ__Question__0DC06FADEAB8E116").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.QuestionDesc)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.QuestionId)
                .IsRequired()
                .HasMaxLength(36)
                .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");
        });

        modelBuilder.Entity<QuestionAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3213E83FFE50928A");

            entity.ToTable("QuestionAnswer");

            entity.HasIndex(e => e.QuestionAnswerId, "UQ__Question__86BEDFCE7B684988").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Answer).HasMaxLength(150);
            entity.Property(e => e.QuestionAnswerId)
                .IsRequired()
                .HasMaxLength(36)
                .HasDefaultValueSql("(CONVERT([nvarchar](36),newid()))");
            entity.Property(e => e.QuestionId).HasMaxLength(36);

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionAnswers)
                .HasPrincipalKey(p => p.QuestionId)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK_QuestionAnswer_QuestionId");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}